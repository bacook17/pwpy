#! /usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
# Copyright 2013 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
chandrabblock in=[FITS] [keywords...]

Perform a Bayesian Blocks analysis of a Chandra "events" file to search for
evidence of variation in the source flux. The only data used are the event
timestamps and the good-time intervals.

** The input file should be pre-filtered using 'dmcopy' to isolate
source counts and potentially eliminate background events (e.g., high-energy
events if the source is expected to be very soft)! **

in=
  The input events FITS file.

out=
  A path in which the results will be written. If unspecified, stdout is used.

p0=0.05
  The initial false-positive probability for detecting a spurious rate
  transition. The default value is generally fine. See Scargle+ 2013 for
  details; this module uses the iterative method described in that
  paper, which adaptively adjusts the prior on the number of blocks.

nbootstrap=256
  The number of bootstrap samples to extract when determining uncertainties on
  the block rates. The default value is generally fine.

In theory we should be compatible with any file that follows the CIAO Data
Model, but I suspect that the processing here makes some Chandra-specific
assumptions. Hence the Chandra-specificity in the name and description.

TODO: We ignore spectral information as well as any distinction between source
and background contributions.
"""

try:
    import xbblocks
except ImportError:
    raise ImportError ('couldn\'t import "xbblocks" - your environment '
                       'may using the CIAO version of Python, which doesn\'t '
                       'provide the needed modules')

try:
    import pyfits
except ImportError:
    raise ImportError ('couldn\'t import "pyfits" - your environment '
                       'may using the CIAO version of Python, which doesn\'t '
                       'provide the needed modules')

import sys
import numpy as np
from kwargv import ParseKeywords, Custom

## quickutil: usage die
#- snippet: usage.py (2012 Sep 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
#- snippet: die.py (2012 Sep 29)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
## end

class Config (ParseKeywords):
    inpath = Custom (str, required=True, uiname='in')

    @Custom (str)
    def out (ostr):
        if ostr is None:
            return sys.stdout
        return open (ostr, 'w')

    # Knobs that can generally be left alone:
    # TODO: figure out when they *should* be adjusted
    p0  = 0.05
    nbootstrap = 256


def process (cfg):
    f = pyfits.open (cfg.inpath)

    timesys = f[0].header['timesys']
    mjdref = f[0].header['mjdref']
    timeunit = f[0].header['timeunit']
    timezero = f[0].header['timezero']
    tstart = f[0].header['tstart']
    tstop = f[0].header['tstop']

    if timeunit == 's':
        tscale = 1. / 86400
    else:
        die ('can\'t handle time unit "%s" in input "%s"', timeunit, cfg.inpath)

    eventhdu = None

    for hdu in f[1:]:
        if hdu.name == 'EVENTS':
            if eventhdu is None:
                eventhdu = hdu
            else:
                die ('input "%s" has multiple EVENTS sections; don\'t know '
                     'which to use', cfg.inpath)

    if eventhdu is None:
        die ('input "%s" has no EVENTS sections', cfg.inpath)

    ccdid = eventhdu.data.ccd_id.min ()
    if eventhdu.data.ccd_id.max () != ccdid:
        die ('can\'t handle data from multiple CCDs in input "%s"', cfg.inpath)

    gtihdu = None

    for hdu in f[1:]:
        if hdu.name == 'GTI' and hdu.header['ccd_id'] == ccdid:
            if gtihdu is None:
                gtihdu = hdu
            else:
                die ('input "%s" has multiple matching GTI sections; don\'t know '
                     'which to use', cfg.inpath)

    if gtihdu is None:
        print >>sys.stderr, 'warning: no GTI info for active CCD %d; trusting ' \
            'TSTART and TSTOP instead' % ccdid
        tstarts = np.asarray ([tstart])
        tstops = np.asarray ([tstop])
    else:
        tstarts = gtihdu.data.START
        tstops = gtihdu.data.STOP

    times = (eventhdu.data.time + timezero) * tscale + mjdref
    tstarts = (tstarts + timezero) * tscale + mjdref
    tstops = (tstops + timezero) * tscale + mjdref

    info = xbblocks.bsttbblock (times, tstarts, tstops, p0=cfg.p0,
                                nbootstrap=cfg.nbootstrap)

    print >>cfg.out, '# p0 = %g' % cfg.p0
    print >>cfg.out, '# timesys =', timesys
    print >>cfg.out, '# tstarts =', ' '.join ('%.5f' % t for t in tstarts)
    print >>cfg.out, '# tstops  =', ' '.join ('%.5f' % t for t in tstops)
    print >>cfg.out, '# n = %d' % times.size

    for i in xrange (info.nblocks):
        s = '%.5f %.5f %4d %g %g %g' % (info.ledges[i], info.redges[i],
                                        info.counts[i], info.widths[i],
                                        info.rates[i], info.bsrstds[i])
        print >>cfg.out, s


def cmdline (argv):
    checkusage (__doc__, argv, usageifnoargs=True)
    cfg = Config ().parse (argv[1:])
    process (cfg)


if __name__ == '__main__':
    cmdline (sys.argv)
