#! /usr/bin/env python
# -*- python -*-

"""astrotool <command> [arguments...]

This is a tool that does quick astronomical calculations that I find myself
performing frequently.

Subcommands are:

"""

import sys, os, math
import numpy as np
from astutil import *
from cgs import *

## quickutil: die usage
#- snippet: die.py (2012 Oct 01)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: usage.py (2012 Oct 01)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end:


def fparse (text):
    try:
        # note: totally reckless about globals/locals passed, etc.
        # nice to have * from astutil and cgs available.
        v = eval (text)
    except Exception as e:
        die ('cannot evaluate "%s": %s (%s)', text, str (e), e.__class__.__name__)

    try:
        f = float (v)
    except Exception as e:
        die ('evaluted "%s", but could not floatify result %r: %s (%s)', text, v,
             str (e), e.__class__.__name__)

    return f


def fmt (v):
    f1 = '%.4g' % v
    f2 = '%.3e' % v

    if f1 == f2:
        reprs = [f1]
    else:
        reprs = [f1, f2]

    if v > 0:
        reprs.append ('10**(%.2f)' % log10 (v))

    return ' = '.join (reprs)


def cmd_abs2app (args):
    """abs2app <absmag[mag]> <dist[pc]> - absolute to apparent magnitude"""

    if len (args) != 2:
        wrongusage (__doc__, 'abs2app expected exactly 2 arguments')

    absmag = fparse (args[0])
    dist = fparse (args[1])
    appmag = absmag + 5 * (log10 (dist) - 1)
    print fmt (appmag)


def cmd_app2abs (args):
    """app2abs <appmag[mag]> <dist[pc]> - apparent to absolute magnitude"""

    if len (args) != 2:
        wrongusage (__doc__, 'app2abs expected exactly 2 arguments')

    appmag = fparse (args[0])
    dist = fparse (args[1])
    absmag = appmag - 5 * (log10 (dist) - 1)
    print fmt (absmag)


def cmd_calc (args):
    """calc {expr...} - evaluate and print"""

    if not len (args):
        wrongusage (__doc__, 'calc expected arguments')

    print fmt (fparse (' '.join (args)))


def cmd_flux2lum (args):
    """flux2lum <flux[cgs]> <dist[pc]> - flux and distance to luminosity"""

    if len (args) != 2:
        wrongusage (__doc__, 'flux2lum expected exactly 2 arguments')

    flux = fparse (args[0])
    dist = fparse (args[1])
    lum = flux * 4 * pi * (dist * cmperpc)**2
    print fmt (lum)


def cmd_lum2flux (args):
    """lum2flux <lum[cgs]> <dist[pc]> - luminosity and distance to flux"""

    if len (args) != 2:
        wrongusage (__doc__, 'lum2flux expected exactly 2 arguments')

    lum = fparse (args[0])
    dist = fparse (args[1])
    flux = lum / (4 * pi * (dist * cmperpc)**2)
    print fmt (flux)


def cmd_sesame (args):
    """sesame {source name} - print source info"""

    if not len (args):
        wrongusage (__doc__, 'sesame expected an argument')

    try:
        import precastro
    except ImportError:
        die ('need the "precastro" module')

    src = ' '.join (args)
    obj = precastro.SiderealObject ()

    try:
        obj.fromsesame (src)
    except Exception as e:
        die ('couldn\'t look up "%s": %s (%s)', src, e, e.__class__.__name__)

    print obj.describe ()


def cmd_ssep (args):
    """ssep <source name> <source name> - print separation between two sources by name"""

    if len (args) != 2:
        wrongusage (__doc__, 'ssep expected 2 arguments')

    try:
        import precastro
    except ImportError:
        die ('need the "precastro" module')

    try:
        obj1 = precastro.SiderealObject ().fromsesame (args[0])
    except Exception as e:
        die ('couldn\'t look up "%s": %s (%s)', args[0], e, e.__class__.__name__)

    try:
        obj2 = precastro.SiderealObject ().fromsesame (args[1])
    except Exception as e:
        die ('couldn\'t look up "%s": %s (%s)', args[1], e, e.__class__.__name__)

    print 'degree:', fmt (sphdist (obj1.dec, obj1.ra, obj2.dec, obj2.ra) * R2D)
    print 'arcsec:', fmt (sphdist (obj1.dec, obj1.ra, obj2.dec, obj2.ra) * R2A)


def _fullusage ():
    usagestr = __doc__

    g = globals ()
    cnames = sorted (n for n in g.iterkeys () if n.startswith ('cmd_'))

    for cname in cnames:
        usagestr += '  astrotool ' + g[cname].__doc__ + '\n'

    return usagestr

usagestr = _fullusage ()


def driver (argv):
    checkusage (usagestr, argv, usageifnoargs=True)

    if len (argv) < 2:
        wrongusage (usagestr, 'need to specify a command')

    func = globals ().get ('cmd_' + argv[1])

    if func is None:
        wrongusage (usagestr, 'no such command "%s"', argv[1])

    func (argv[2:])


if __name__ == '__main__':
    driver (sys.argv)
