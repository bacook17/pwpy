#! /usr/bin/env python
# -*- python -*-
# Copyright 2013-2014 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
simbadastrom [identifier] [MJD]

Use SIMBAD to predict the position of an object, with uncertainties.
"""

import codecs, sys
from astutil import *

## quickutil: usage die popoption
#- snippet: usage.py (2012 Oct 01)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
#- snippet: die.py (2012 Oct 01)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: popoption.py (2012 Oct 01)
#- SHA1: 5552980b9034cd6d7ead4d0cd4ca1839face7e84
def popoption (ident, argv=None):
    if argv is None:
        from sys import argv
    if len (ident) == 1:
        ident = '-' + ident
    else:
        ident = '--' + ident
    found = ident in argv
    if found:
        argv.remove (ident)
    return found
## end


def commandline (argv):
    checkusage (__doc__, argv, usageifnoargs=True)
    verbose = popoption ('v', argv)

    if len (argv) != 3:
        wrongusage (__doc__, 'expected exactly two arguments')

    ident = argv[1]
    mjd = float (argv[2])

    info = AstrometryInfo ()
    info.fill_from_simbad (ident, debug=verbose)
    p = info.predict (mjd)
    print '%s at %.3f:' % (ident, mjd)
    print
    info.print_prediction (p)


if __name__ == '__main__':
    # XXX: librarify.
    enc = sys.stdin.encoding or 'utf-8'
    sys.stdin = codecs.getreader (enc) (sys.stdin)
    enc = sys.stdout.encoding or enc
    sys.stdout = codecs.getwriter (enc) (sys.stdout)
    enc = sys.stderr.encoding or enc
    sys.stderr = codecs.getwriter (enc) (sys.stderr)

    commandline (sys.argv)
