#! /usr/bin/env python
# -*- python -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
imhack <input image> <output image>

Copy the contents of one image into another image. It's up to you to
ensure that all of the metadata, etc, are consistent (or not). The only
constraint that's checked is that the number of pixels is the same.
"""

import astimage

## quickutil: die usage
#- snippet: die.py (2012 Mar 29)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
#- snippet: usage.py (2012 Mar 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end

def imhack (inpath, outpath):
    try:
        with astimage.open (inpath, 'r') as imin:
            indata = imin.read ()
    except Exception as e:
        die ('cannot open input "%s": %s', inpath, e)

    try:
        with astimage.open (outpath, 'rw') as imout:
            if imout.size != indata.size:
                die ('cannot import data: input has %d pixels; output has %d',
                     indata.size, imout.size)

            imout.write (indata)
    except Exception as e:
        die ('cannot write to output "%s": %s', outpath, e)


def cmdline (argv):
    checkusage (__doc__, argv, usageifnoargs=True)

    if len (argv) != 3:
        wrongusage (__doc__, 'exactly 2 arguments expected')

    inpath, outpath = argv[1:]
    imhack (inpath, outpath)


if __name__ == '__main__':
    import sys
    cmdline (sys.argv)
