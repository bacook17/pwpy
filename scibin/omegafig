#! /usr/bin/env python
# -*- python -*-
# Copyright 2013 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""omegafig [Python file] [keywords...]

Make a plot with omegaplot, either interactively or to hard copy. The Python
file should provide a function called plot() that returns an omegaplot
painter.

out=
 Path of output image to create; image will be displayed interactively if
 unspecified. Format guessed from the file extension; legal ones include pdf,
 eps, ps, png, svg.

dims=
 Width and height of the output image, in points or pixels; ignored if
 displaying interactively. If only one value is specified, it is used for both
 width and height. (default: 256,256; nonintegers not allowed)

margin=
 Margin width, in points or pixels (default: 2)

omstyle=
 Name of the OmegaPlot style class to use (default: ColorOnWhiteVector)

pango=[bool]
 Whether to use Pango for text rendering (default: true)

pangofamily=[str]
 The name of the font family to use for text; passed to Pango

pangosize=[int]
 The size of the font to use for text; passed to Pango
"""

import sys, os, types, omega as om
from kwargv import ParseKeywords, Custom


## quickutil: usage die
#- snippet: usage.py (2012 Oct 01)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
#- snippet: die.py (2012 Oct 01)
#- SHA1: 3bdd3282e52403d2dec99d72680cb7bc95c99843
def die (fmt, *args):
    if not len (args):
        raise SystemExit ('error: ' + str (fmt))
    raise SystemExit ('error: ' + (fmt % args))
## end


class Config (ParseKeywords):
    out = str
    pango = True
    pangofamily = str
    pangosize = int

    @Custom (2.0)
    def margin (v):
        return [v] * 4

    @Custom ([256, int])
    def dims (v):
        if v[1] is None:
            v[1] = v[0]
        return v

    @Custom ('ColorOnWhiteVector')
    def omstyle (v):
        try:
            return getattr (om.styles, v) ()
        except:
            die ('can\'t load/instantiate OmegaPlot style "%s"', v)


def doit (driver, args):
    # Load up the driver code

    try:
        text = open (driver).read ()
    except Exception as e:
        die ('cannot read driver file "%s": %s', driver, e)

    try:
        code = compile (text, driver, 'exec')
    except Exception as e:
        if 'OMEGAFIG_BACKTRACE' in os.environ:
            raise
        die ('cannot compile driver file "%s": %s', driver, e)

    ns = {'__file__': driver,
          '__name__': '__omegafig__'}

    try:
        exec code in ns
    except Exception as e:
        if 'OMEGAFIG_BACKTRACE' in os.environ:
            raise
        die ('cannot execute driver file "%s": %s', driver, e)

    pfunc = ns.get ('plot')
    if pfunc is None:
        die ('driver file "%s" does not provide a function called "plot"', driver)
    if not isinstance (pfunc, types.FunctionType):
        die ('driver file "%s" provides something called "plot", but it\'s '
             'not a function', driver)

    # Deal with args

    nargs = pfunc.func_code.co_argcount
    argnames = pfunc.func_code.co_varnames

    keywords = []
    nonkeywords = []

    for arg in args:
        if '=' in arg:
            keywords.append (arg)
        else:
            nonkeywords.append (arg)

    if len (nonkeywords) != nargs:
        die ('expected %d non-keyword arguments to driver, but got %d',
             nargs, len (nonkeywords))

    config = Config ()
    defaults = ns.get ('figdefaults')

    if defaults is not None:
        for key in defaults:
            setattr (config, key, defaults[key])

    config.parse (keywords)

    # Set up omegaplot globals as appropriate

    if config.pango:
        import omega.pango

        fontparams = {}
        if config.pangofamily is not None:
            fontparams['family'] = config.pangofamily
        if config.pangosize is not None:
            fontparams['size'] = config.pangosize
        if len (fontparams):
            omega.pango.setFont (**fontparams)

    # Execute.

    p = pfunc (*nonkeywords)

    if config.out is None:
        p.show (style=config.omstyle)
    else:
        p.save (config.out, style=config.omstyle, dims=config.dims,
                margins=config.margin)


def cmdline (argv):
    checkusage (__doc__, argv, usageifnoargs=True)
    doit (argv[1], argv[2:])


if __name__ == '__main__':
    cmdline (sys.argv)
