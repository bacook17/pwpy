#! /usr/bin/env casa-python
# -*- python -*-
# Copyright 2013 Peter Williams
# Licensed under the GNU General Public License, version 3 or higher.

"""
When CASA encounters flagged channels in bandpass calibration tables, it
interpolates over them as best it can -- even if interp='<any>,nearest'. This
means that if certain channels are unflagged in some target data but entirely
flagged in your BP cal, they'll get multiplied by some number that may or may
not be reasonable, not flagged. This is scary if, for instance, you're using
an automated system to find RFI, or you flag edge channels in some uneven way.

This script writes out a list of flagging commands corresponding to the
flagged channels in the bandpass table to ensure that the data without
bandpass solutions are flagged.

Note that, because we can't select by antpol, we can't express a situation in
which the R and L bandpass solutions have different flags. But in CASA the
flags seem to always be the same.

We're assuming that the channelization of the bandpass solution and the data
are the same.
"""

import sys, numpy as np, casautil
from os.path import join

if len (sys.argv) != 2:
    print 'usage: extractbpflags <BP cal table>'
    sys.exit (1)


tb = casautil.tools.table ()
calpath = sys.argv[1]


tb.open (join (calpath, 'ANTENNA'))
antnames = tb.getcol ('NAME')
tb.close ()

tb.open (calpath)
try:
    t = tb.getkeyword ('VisCal')
except RuntimeError:
    print >>sys.stderr, ('error: no "VisCal" keyword in %s; '
                         'doesn\'t seem to be a BP cal table' % calpath)
    sys.exit (1)

if t != 'B Jones':
    print >>sys.stderr, ('error: table %s doesn\'t seem to be a bandpass '
                         'table; type is "%s"' % (calpath, t))
    sys.exit (1)

def emit (antidx, spwidx, chanstart, chanend):
    """Channel ranges are inclusive, unlike Python syntax."""

    print "antenna='%s&*' spw='%d:%d~%d' reason='BANDPASS_FLAGGED'" % \
        (antnames[antidx], spwidx, chanstart, chanend)

for row in xrange (tb.nrows ()):
    ant = tb.getcell ('ANTENNA1', row)
    spw = tb.getcell ('SPECTRAL_WINDOW_ID', row)
    flag = tb.getcell ('FLAG', row)

    # This is the logical 'or' of the two polarizations: i.e., anything that
    # is flagged in either poln is flagged in this.
    sqflag = ~((~flag).prod (axis=0, dtype=np.bool))

    runstart = None

    for i in xrange (sqflag.size):
        if sqflag[i]:
            # This channel is flagged. Start a run if not already in one.
            if runstart is None:
                runstart = i
        elif runstart is not None:
            # The current run just ended.
            emit (ant, spw, runstart, i - 1)
            runstart = None

    if runstart is not None:
        emit (ant, spw, runstart, i)

tb.close ()
