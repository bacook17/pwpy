#! /usr/bin/env python
# -*- python -*-
# Copyright 2012 Peter Williams
# Licensed under the GNU General Public License version 3 or higher

"""
sfextract [-k] <input image> [resid image] <SFIND keywords=,+options>

Given an image, run MIRIAD SFIND on it and print *deconvolved* source
parameters on standard output. Options on the command line are passed
through to SFIND more-or-less verbatim. If given a second path, a
residual image with the SFIND sources subtracted is created.

Note that SFIND expects there to be restoring beam information in the
image; if this is missing, it will make a dumb guess.

Suggested sfind keywords: rmsbox=64 alpha=0.5 +fdrpeak,psfsize

-k : keep the temporary data directory, and print its location to
     stderr.
"""

# Programmer notes:
"""
Not very happy with the deconvolution of (near-)pointlike
sources. I've hacked up the code from gaupar.for which I feel may be
ill-advised. (See astutil.)
"""

import sys, numpy as np
import astimage
from astutil import *
import srctable

try:
    from scipy.special import erfinv as ss_erfinv
except ImportError:
    ss_erfinv = None

## quickutil: usage
#- snippet: usage.py (2012 Mar 29)
#- SHA1: ac032a5db2efb5508569c4d5ba6eeb3bba19a7ca
def showusage (docstring, short, stream, exitcode):
    if stream is None:
        from sys import stdout as stream
    if not short:
        print >>stream, 'Usage:', docstring.strip ()
    else:
        intext = False
        for l in docstring.splitlines ():
            if intext:
                if not len (l):
                    break
                print >>stream, l
            elif len (l):
                intext = True
                print >>stream, 'Usage:', l
        print >>stream, \
            '\nRun with a sole argument --help for more detailed usage information.'
    raise SystemExit (exitcode)

def checkusage (docstring, argv=None, usageifnoargs=False):
    if argv is None:
        from sys import argv
    if len (argv) == 1 and usageifnoargs:
        showusage (docstring, True, None, 0)
    if len (argv) == 2 and argv[1] in ('-h', '--help'):
        showusage (docstring, False, None, 0)

def wrongusage (docstring, *rest):
    import sys
    intext = False

    if len (rest) == 0:
        detail = 'invalid command-line arguments'
    elif len (rest) == 1:
        detail = rest[0]
    else:
        detail = rest[0] % tuple (rest[1:])

    print >>sys.stderr, 'error:', detail, '\n' # extra NL
    showusage (docstring, True, sys.stderr, 1)
## end


def cmdline (argv):
    inpath = residpath = None
    keepdir = False
    keywords = {}

    checkusage (__doc__, argv, usageifnoargs=True)

    for arg in argv[1:]:
        if arg == '-k':
            keepdir = True
        elif '=' in arg:
            kw, val = arg.split ('=', 1)
            keywords[kw] = val
        elif arg[0] == '+':
            for opt in arg[1:].split (','):
                keywords[opt] = True
        elif residpath is not None:
            wrongusage (__doc__, 'only one or two non-keyword arguments are allowed')
        elif inpath is not None:
            residpath = arg
        else:
            inpath = arg

    if inpath is None:
        wrongusage (__doc__, 'must supply input image path')
    if 'logfile' in keywords:
        del keywords['logfile']
        warn ('the "logfile" parameter to sfind will be ignored')
    if keywords.get ('fdrimg', False):
        warn ('the file created by the "fdrimg" option will be discarded')
    if keywords.get ('sigmaimg', False):
        warn ('the file created by the "sigmaimg" option will be discarded')
    if keywords.get ('rmsimg', False):
        warn ('the file created by the "rmsimg" option will be discarded')
    if keywords.get ('normimg', False):
        warn ('the file created by the "normimg" option will be discarded')
    if keywords.get ('kvannot', False):
        warn ('the file created by the "kvannot" option will be discarded')

    setup_resid (inpath, residpath, keywords, keepdir=keepdir)


def setup_resid (inpath, residpath, keywords, keepdir=False):
    img = astimage.open (inpath, 'r')

    if residpath is None:
        return sfind_extract (img, None, inpath, keywords, keepdir=keepdir)

    try:
        resid = img.saveCopy (residpath, openmode='rw')
        rv = sfind_extract (img, resid, inpath, keywords, keepdir=keepdir)
        resid.close ()
        return rv
    except Exception:
        et, ev, etb = sys.exc_info ()
        try:
            resid.close ()
            resid.delete ()
        except:
            warn ('couldn\'t remove residual image "%s"', residpath)
        raise et, ev, etb


def sfind_extract (img, resid, inpath, keywords, keepdir=False):
    sfinfo = {'imagepath': inpath,
              'sfindargs': ' '.join ('%s=%s' % (k, keywords[k])
                                     for k in sorted (keywords.iterkeys ()))}

    if img.bmaj is None:
        warn ('no restoring beam information; will NOT deconvolve')
        sfinfo['deconvolved'] = 'false'
    else:
        sfinfo['deconvolved'] = 'true'

    # Get image into MIRIAD format, possibly via FITS, run SFIND, and
    # process. We're going to change directories so canonicalize the
    # input path.

    from tempfile import mkdtemp
    from os.path import join, realpath
    from os import getcwd, chdir, devnull
    from shutil import rmtree
    import subprocess
    from mirexec import TaskFits, TaskSFind

    origdir = getcwd ()
    inpath = realpath (inpath)
    tmpcontainer = mkdtemp (prefix='sfextract.')

    if keepdir:
        print >>sys.stderr, '# sfextract temporary directory:', tmpcontainer

    try:
        mirpath = fitspath = None

        if isinstance (img, astimage.MIRIADImage):
            mirpath = inpath
        elif isinstance (img, astimage.FITSImage):
            fitspath = inpath
        else:
            fitspath = join (tmpcontainer, 'input.fits')
            img.saveAsFITS (fitspath)

        chdir (tmpcontainer)

        if mirpath is None:
            mirpath = 'input.mirimg'
            TaskFits (in_=fitspath, out=mirpath, op='xyin').runsilent ()

        stdout, stderr = TaskSFind (in_=mirpath, **keywords).snarf ()

        for l in stdout:
            if l.startswith ('FDR selected a'):
                sfinfo['pvalue'] = fortfloat (l.split ()[-1][:-1])
            if l.startswith ('This corresponds to'):
                sfinfo['sigmathresh'] = fortfloat (l.split ()[-2])
            if l.startswith ('which means a minimum'):
                sfinfo['minflux'] = fortfloat (l.split ()[-2])
            if l.startswith ('FDR detected'):
                sfinfo['npix'] = int (l.split ()[-2])
            if l.startswith ('Of the FDR pixels'):
                sfinfo['nused'] = int (l.split ()[-6])
            if l.startswith ('A total of'):
                sfinfo['nrawsrc'] = int (l.split ()[3])
            if l.startswith ('No FDR pixels'):
                npv = fortfloat (l.split ()[6])
                sfinfo['neededpvalue'] = npv
                if ss_erfinv is not None and np.isfinite (npv):
                    sfinfo['neededsigma'] = np.sqrt (2) * ss_erfinv (1 - 2 * npv)
            if l.startswith ('RMS of the interior RMS'):
                sfinfo['typrms'] = fortfloat (l.split ()[6])

        parse_and_print (sfinfo, img, open ('sfind.log'), resid)
    finally:
        chdir (origdir)
        if not keepdir:
            try:
                rmtree (tmpcontainer)
            except:
                warn ('couldn\'t remove temporary data directory "%s"', tmpcontainer)


def parse_and_print (sfinfo, img, sfstream, resid):
    import sys

    headers = ['%s=%s' % (k, sfinfo[k])
               for k in sorted (sfinfo.iterkeys ())]

    if resid is not None:
        rsimple = resid.simple ()
        rdata = rsimple.read ()

    # Get raw source list and look for duplicate entries. It appears
    # that sfind doesn't subtract found sources from the image, so
    # it's possible for multiple starting points to converge to the
    # same source, and I've seen this happen in practice. Because of
    # this lack of subtraction, I don't think sfind will ever report
    # overlapping sources with very different morphologies, so we only
    # check for overlapping position and don't consider the
    # shape. (You could imagine a clever algorithm identifying a
    # certain source as a superposition of a point and an extended
    # component, for instance.)

    sources = list (srctable.parseSFind (sfstream))

    for s in sources:
        s._hide = False

    for i1, s1 in enumerate (sources):
        if s1._hide:
            continue

        p1 = rsimple.topixel ([s1.dec, s1.ra])
        pixscale = pixelscale (rsimple.toworld, p1)

        for s2 in sources[i1+1:]:
            if s2._hide:
                continue

            if sphdist (s1.dec, s1.ra, s2.dec, s2.ra) < pixscale:
                s2._hide = True

    sources = [s for s in sources if not s._hide]

    # Now that we've filtered, deconvolve and maybe make residual.

    def func ():
        for s in sources:
            if resid is not None:
                subtract_source (s, rdata, rsimple)

            s.pkflux = None

            if img.bmaj is not None:
                px = rsimple.topixel ([s.dec, s.ra])
                minaxprod = 2 * np.pi * pixelscale (rsimple.toworld, px)**2 * S2F**2
                srctable.deconvolve (s, img.bmaj, img.bmin, img.bpa, minaxprod)
                # TODO: do something with s.deconvolve_error

            yield s

    # Ready to write and possibly make the residual image

    cols = [c for c in srctable.sfindcols
            if c not in ('pkflux', 'pkflux_uc')]
    m = srctable.stmapping ()
    srctable.writetable (sys.stdout, headers, m.cols (cols), func ())

    if resid is not None:
        rsimple.write (rdata)


def subtract_source (src, data, image):
    # FIXME: this is copied from msimgen; should probably centralize
    # in a module. We sidestep some tricky issues about rotation of
    # ra/dec vs the pixel axis by computing equatorial coordinates for
    # every pixel that we think is near the source.

    GAUSSMINFLUX = 1e-5 # XXX lame hardcoding

    from numpy import (array, ceil, cos, empty, exp, floor, log,
                       maximum, ones, pi, sin, sqrt, zeros)

    smajor = src.major * F2S
    sminor = src.minor * F2S
    pixelcoords = image.topixel ([src.dec, src.ra])

    # Compute effective sigmas in RA and Dec directions, then figure
    # out about how far out we need to image in pixel space to do a
    # faithful job of representing the source. This is parametrized by
    # GAUSSMINFLUX, the approximate minimum Jy/px flux value that we
    # will compute.

    slat = ((cos (src.pa) / smajor)**2 + (sin (src.pa) / sminor)**2)**-0.5
    slon = ((sin (src.pa) / smajor)**2 + (cos (src.pa) / sminor)**2)**-0.5
    numsigmatotravel = sqrt (2 * log (abs (src.pkflux) / GAUSSMINFLUX))
    numsigmatotravel = max (numsigmatotravel, 3)

    dlat = slat * numsigmatotravel
    dlon = slon * numsigmatotravel
    deltapix = zeros (4) # minus y, minus x, plus y, plus x

    for c1, c2 in zip ((-1, -1, 1, 1), (-1, 1, -1, 1)):
        delta = pixelcoords - image.topixel ([src.dec + c1 * dlat,
                                              src.ra + c2 * dlon / cos (src.dec)])
        deltapix[0] = min (deltapix[0], delta[0])
        deltapix[1] = min (deltapix[1], delta[1])
        deltapix[2] = max (deltapix[2], delta[0])
        deltapix[3] = max (deltapix[3], delta[1])

    # Pad out to at least 3 pixels each way
    coeff = array ([-1, -1, 1, 1])
    deltapix = coeff * maximum (coeff * deltapix, ones (4) * 3)

    # Transform to absolute pixels and clip to bounds. abspix[2,3] are
    # offset by one because they only come up in Python range-type
    # situations.

    abspix = empty (4, dtype=np.int)
    abspix[0] = max (floor (deltapix[0] + pixelcoords[0]), 0)
    abspix[1] = max (floor (deltapix[1] + pixelcoords[1]), 0)
    abspix[2] = min (ceil (deltapix[2] + pixelcoords[0]) + 1, image.shape[0])
    abspix[3] = min (ceil (deltapix[3] + pixelcoords[1]) + 1, image.shape[1])

    # Compute the Gaussian values, precreating arrays of ra/dec values
    # of pixels so we can do most of the math vectorially.

    ny = abspix[2] - abspix[0]
    nx = abspix[3] - abspix[1]
    lats, lons = empty ((2, ny, nx))

    for ypix in xrange (abspix[0], abspix[2]):
        dy = ypix - abspix[0]
        pixelcoords[0] = ypix

        for xpix in xrange (abspix[1], abspix[3]):
            dx = xpix - abspix[1]
            pixelcoords[1] = xpix
            lats[dy,dx], lons[dy,dx] = image.toworld (pixelcoords)

    lons -= src.ra
    lons *= cos (lats) # sky coords to offset
    lats -= src.dec
    b = sin (-2 * src.pa) * (sminor**-2 - smajor**-2)
    q = -0.5 * ((lats / slat)**2 + b * lons * lats + (lons / slon)**2)
    px = src.pkflux * exp (q)

    # Finally done.
    data[abspix[0]:abspix[2],abspix[1]:abspix[3]] -= px


def pixelscale (toworld, pixelcoords):
    """Given pixel coordinates and a transform function, return the
    root of the angular area of a pixel at those coordinates in
    radians. This can vary depending on the map projection."""

    DELTA = 1e-5

    pixelcoords = list (pixelcoords)
    w1 = toworld (pixelcoords)
    pixelcoords[-1] += DELTA
    pixelcoords[-2] += DELTA
    w2 = toworld (pixelcoords)
    d = w2 - w1
    return np.sqrt ((d[-1]**2 + d[-2]**2) / (2 * DELTA**2))


def fortfloat (s):
    if s[0] == '*':
        return np.nan
    return float (s)


def warn (fmt, args):
    print >>sys.stderr, 'warning:', fmt % args


if __name__ == '__main__':
    try:
        import mirtask.cliutil
    except ImportError:
        pass
    cmdline (sys.argv)
